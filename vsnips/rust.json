{
    "assert": {
        "prefix": "assert",
        "body": [
            "assert!(${1});"
        ],
        "description": "assert!(…);"
    },
    "assert_eq": {
        "prefix": "assert_eq",
        "body": [
            "assert_eq!(${1}, ${2});"
        ],
        "description": "assert_eq!(…, …);"
    },
    "fn": {
        "prefix": "fn",
        "body": [
            "fn ${1:name}(${2:arg}: ${3:Type}) -> ${4:RetType} {",
            "    ${5:unimplemented!();}",
            "}"
        ],
        "description": "fn …(…) { … }"
    },
    "test": {
        "prefix": "test",
        "body": [
            "#[test]",
            "fn ${1:name}() {",
            "    ${2:unimplemented!();}",
            "}"
        ],
        "description": "#[test]"
    },
    "async-std-test": {
        "prefix": "asynctest",
        "body": [
            "#[async_std::test]",
            "async fn ${1:name}() -> ${2:Result}<${3:()}> {",
            "    ${4:unimplemented!();}",
            "    Ok(())",
            "}"
        ],
        "description": "#[async_std::test]"
    },
    "async-std-main": {
        "prefix": "asyncmain",
        "body": [
            "#[async_std::main]",
            "async fn main() -> ${2:Result}<${1:()}> {",
            "    ${3:unimplemented!();}",
            "    Ok(())",
            "}"
        ]
    },
    "route": {
        "prefix": "route",
        "body": [
            "${3:pub} async fn ${1:route}(req: Request<${2:State}>) -> tide::Result {",
            "    ${4:let res = Response::builder(StatusCode::Ok).build();}",
            "    Ok(res)",
            "}"
        ]
    }
}
